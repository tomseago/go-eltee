// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type StringMsg struct {
	Val                  string   `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	List                 []string `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringMsg) Reset()         { *m = StringMsg{} }
func (m *StringMsg) String() string { return proto.CompactTextString(m) }
func (*StringMsg) ProtoMessage()    {}
func (*StringMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *StringMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMsg.Unmarshal(m, b)
}
func (m *StringMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMsg.Marshal(b, m, deterministic)
}
func (m *StringMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMsg.Merge(m, src)
}
func (m *StringMsg) XXX_Size() int {
	return xxx_messageInfo_StringMsg.Size(m)
}
func (m *StringMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMsg.DiscardUnknown(m)
}

var xxx_messageInfo_StringMsg proto.InternalMessageInfo

func (m *StringMsg) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func (m *StringMsg) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type SrcDest struct {
	Src                  string   `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dest                 string   `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SrcDest) Reset()         { *m = SrcDest{} }
func (m *SrcDest) String() string { return proto.CompactTextString(m) }
func (*SrcDest) ProtoMessage()    {}
func (*SrcDest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *SrcDest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SrcDest.Unmarshal(m, b)
}
func (m *SrcDest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SrcDest.Marshal(b, m, deterministic)
}
func (m *SrcDest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SrcDest.Merge(m, src)
}
func (m *SrcDest) XXX_Size() int {
	return xxx_messageInfo_SrcDest.Size(m)
}
func (m *SrcDest) XXX_DiscardUnknown() {
	xxx_messageInfo_SrcDest.DiscardUnknown(m)
}

var xxx_messageInfo_SrcDest proto.InternalMessageInfo

func (m *SrcDest) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *SrcDest) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

// This is how we get polymorphic behavior for ProfileControls
type ProfileControl struct {
	// Types that are valid to be assigned to Sub:
	//	*ProfileControl_Group
	//	*ProfileControl_Enm
	//	*ProfileControl_Intensity
	//	*ProfileControl_PanTilt
	//	*ProfileControl_LedVar
	Sub                  isProfileControl_Sub `protobuf_oneof:"sub"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ProfileControl) Reset()         { *m = ProfileControl{} }
func (m *ProfileControl) String() string { return proto.CompactTextString(m) }
func (*ProfileControl) ProtoMessage()    {}
func (*ProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *ProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileControl.Unmarshal(m, b)
}
func (m *ProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileControl.Marshal(b, m, deterministic)
}
func (m *ProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileControl.Merge(m, src)
}
func (m *ProfileControl) XXX_Size() int {
	return xxx_messageInfo_ProfileControl.Size(m)
}
func (m *ProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileControl proto.InternalMessageInfo

type isProfileControl_Sub interface {
	isProfileControl_Sub()
}

type ProfileControl_Group struct {
	Group *GroupProfileControl `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type ProfileControl_Enm struct {
	Enm *EnumProfileControl `protobuf:"bytes,2,opt,name=enm,proto3,oneof"`
}

type ProfileControl_Intensity struct {
	Intensity *IntensityProfileControl `protobuf:"bytes,3,opt,name=intensity,proto3,oneof"`
}

type ProfileControl_PanTilt struct {
	PanTilt *PanTiltProfileControl `protobuf:"bytes,4,opt,name=panTilt,proto3,oneof"`
}

type ProfileControl_LedVar struct {
	LedVar *LedVarProfileControl `protobuf:"bytes,5,opt,name=ledVar,proto3,oneof"`
}

func (*ProfileControl_Group) isProfileControl_Sub() {}

func (*ProfileControl_Enm) isProfileControl_Sub() {}

func (*ProfileControl_Intensity) isProfileControl_Sub() {}

func (*ProfileControl_PanTilt) isProfileControl_Sub() {}

func (*ProfileControl_LedVar) isProfileControl_Sub() {}

func (m *ProfileControl) GetSub() isProfileControl_Sub {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *ProfileControl) GetGroup() *GroupProfileControl {
	if x, ok := m.GetSub().(*ProfileControl_Group); ok {
		return x.Group
	}
	return nil
}

func (m *ProfileControl) GetEnm() *EnumProfileControl {
	if x, ok := m.GetSub().(*ProfileControl_Enm); ok {
		return x.Enm
	}
	return nil
}

func (m *ProfileControl) GetIntensity() *IntensityProfileControl {
	if x, ok := m.GetSub().(*ProfileControl_Intensity); ok {
		return x.Intensity
	}
	return nil
}

func (m *ProfileControl) GetPanTilt() *PanTiltProfileControl {
	if x, ok := m.GetSub().(*ProfileControl_PanTilt); ok {
		return x.PanTilt
	}
	return nil
}

func (m *ProfileControl) GetLedVar() *LedVarProfileControl {
	if x, ok := m.GetSub().(*ProfileControl_LedVar); ok {
		return x.LedVar
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ProfileControl) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ProfileControl_Group)(nil),
		(*ProfileControl_Enm)(nil),
		(*ProfileControl_Intensity)(nil),
		(*ProfileControl_PanTilt)(nil),
		(*ProfileControl_LedVar)(nil),
	}
}

type GroupProfileControl struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Controls             []*ProfileControl `protobuf:"bytes,3,rep,name=controls,proto3" json:"controls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupProfileControl) Reset()         { *m = GroupProfileControl{} }
func (m *GroupProfileControl) String() string { return proto.CompactTextString(m) }
func (*GroupProfileControl) ProtoMessage()    {}
func (*GroupProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *GroupProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupProfileControl.Unmarshal(m, b)
}
func (m *GroupProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupProfileControl.Marshal(b, m, deterministic)
}
func (m *GroupProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupProfileControl.Merge(m, src)
}
func (m *GroupProfileControl) XXX_Size() int {
	return xxx_messageInfo_GroupProfileControl.Size(m)
}
func (m *GroupProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_GroupProfileControl proto.InternalMessageInfo

func (m *GroupProfileControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupProfileControl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupProfileControl) GetControls() []*ProfileControl {
	if m != nil {
		return m.Controls
	}
	return nil
}

type EnumProfileControlOption struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values               []int32  `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	VarName              string   `protobuf:"bytes,3,opt,name=varName,proto3" json:"varName,omitempty"`
	VarOffset            int32    `protobuf:"varint,4,opt,name=varOffset,proto3" json:"varOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnumProfileControlOption) Reset()         { *m = EnumProfileControlOption{} }
func (m *EnumProfileControlOption) String() string { return proto.CompactTextString(m) }
func (*EnumProfileControlOption) ProtoMessage()    {}
func (*EnumProfileControlOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *EnumProfileControlOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnumProfileControlOption.Unmarshal(m, b)
}
func (m *EnumProfileControlOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnumProfileControlOption.Marshal(b, m, deterministic)
}
func (m *EnumProfileControlOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumProfileControlOption.Merge(m, src)
}
func (m *EnumProfileControlOption) XXX_Size() int {
	return xxx_messageInfo_EnumProfileControlOption.Size(m)
}
func (m *EnumProfileControlOption) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumProfileControlOption.DiscardUnknown(m)
}

var xxx_messageInfo_EnumProfileControlOption proto.InternalMessageInfo

func (m *EnumProfileControlOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnumProfileControlOption) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *EnumProfileControlOption) GetVarName() string {
	if m != nil {
		return m.VarName
	}
	return ""
}

func (m *EnumProfileControlOption) GetVarOffset() int32 {
	if m != nil {
		return m.VarOffset
	}
	return 0
}

type EnumProfileControl struct {
	Id                   string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ChannelIx            int32                       `protobuf:"varint,3,opt,name=channelIx,proto3" json:"channelIx,omitempty"`
	Options              []*EnumProfileControlOption `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *EnumProfileControl) Reset()         { *m = EnumProfileControl{} }
func (m *EnumProfileControl) String() string { return proto.CompactTextString(m) }
func (*EnumProfileControl) ProtoMessage()    {}
func (*EnumProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *EnumProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnumProfileControl.Unmarshal(m, b)
}
func (m *EnumProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnumProfileControl.Marshal(b, m, deterministic)
}
func (m *EnumProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumProfileControl.Merge(m, src)
}
func (m *EnumProfileControl) XXX_Size() int {
	return xxx_messageInfo_EnumProfileControl.Size(m)
}
func (m *EnumProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_EnumProfileControl proto.InternalMessageInfo

func (m *EnumProfileControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EnumProfileControl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnumProfileControl) GetChannelIx() int32 {
	if m != nil {
		return m.ChannelIx
	}
	return 0
}

func (m *EnumProfileControl) GetOptions() []*EnumProfileControlOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type IntensityProfileControl struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ChannelIx            int32    `protobuf:"varint,3,opt,name=channelIx,proto3" json:"channelIx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntensityProfileControl) Reset()         { *m = IntensityProfileControl{} }
func (m *IntensityProfileControl) String() string { return proto.CompactTextString(m) }
func (*IntensityProfileControl) ProtoMessage()    {}
func (*IntensityProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *IntensityProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntensityProfileControl.Unmarshal(m, b)
}
func (m *IntensityProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntensityProfileControl.Marshal(b, m, deterministic)
}
func (m *IntensityProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntensityProfileControl.Merge(m, src)
}
func (m *IntensityProfileControl) XXX_Size() int {
	return xxx_messageInfo_IntensityProfileControl.Size(m)
}
func (m *IntensityProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_IntensityProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_IntensityProfileControl proto.InternalMessageInfo

func (m *IntensityProfileControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IntensityProfileControl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IntensityProfileControl) GetChannelIx() int32 {
	if m != nil {
		return m.ChannelIx
	}
	return 0
}

type PanTiltProfileControlAxis struct {
	Coarse               int32    `protobuf:"varint,1,opt,name=coarse,proto3" json:"coarse,omitempty"`
	Fine                 int32    `protobuf:"varint,2,opt,name=fine,proto3" json:"fine,omitempty"`
	MinRad               float64  `protobuf:"fixed64,3,opt,name=minRad,proto3" json:"minRad,omitempty"`
	MaxRad               float64  `protobuf:"fixed64,4,opt,name=maxRad,proto3" json:"maxRad,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PanTiltProfileControlAxis) Reset()         { *m = PanTiltProfileControlAxis{} }
func (m *PanTiltProfileControlAxis) String() string { return proto.CompactTextString(m) }
func (*PanTiltProfileControlAxis) ProtoMessage()    {}
func (*PanTiltProfileControlAxis) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *PanTiltProfileControlAxis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PanTiltProfileControlAxis.Unmarshal(m, b)
}
func (m *PanTiltProfileControlAxis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PanTiltProfileControlAxis.Marshal(b, m, deterministic)
}
func (m *PanTiltProfileControlAxis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanTiltProfileControlAxis.Merge(m, src)
}
func (m *PanTiltProfileControlAxis) XXX_Size() int {
	return xxx_messageInfo_PanTiltProfileControlAxis.Size(m)
}
func (m *PanTiltProfileControlAxis) XXX_DiscardUnknown() {
	xxx_messageInfo_PanTiltProfileControlAxis.DiscardUnknown(m)
}

var xxx_messageInfo_PanTiltProfileControlAxis proto.InternalMessageInfo

func (m *PanTiltProfileControlAxis) GetCoarse() int32 {
	if m != nil {
		return m.Coarse
	}
	return 0
}

func (m *PanTiltProfileControlAxis) GetFine() int32 {
	if m != nil {
		return m.Fine
	}
	return 0
}

func (m *PanTiltProfileControlAxis) GetMinRad() float64 {
	if m != nil {
		return m.MinRad
	}
	return 0
}

func (m *PanTiltProfileControlAxis) GetMaxRad() float64 {
	if m != nil {
		return m.MaxRad
	}
	return 0
}

type PanTiltProfileControl struct {
	Id                   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pan                  *PanTiltProfileControlAxis `protobuf:"bytes,3,opt,name=pan,proto3" json:"pan,omitempty"`
	Tilt                 *PanTiltProfileControlAxis `protobuf:"bytes,4,opt,name=tilt,proto3" json:"tilt,omitempty"`
	ChSpeed              int32                      `protobuf:"varint,5,opt,name=chSpeed,proto3" json:"chSpeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *PanTiltProfileControl) Reset()         { *m = PanTiltProfileControl{} }
func (m *PanTiltProfileControl) String() string { return proto.CompactTextString(m) }
func (*PanTiltProfileControl) ProtoMessage()    {}
func (*PanTiltProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *PanTiltProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PanTiltProfileControl.Unmarshal(m, b)
}
func (m *PanTiltProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PanTiltProfileControl.Marshal(b, m, deterministic)
}
func (m *PanTiltProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanTiltProfileControl.Merge(m, src)
}
func (m *PanTiltProfileControl) XXX_Size() int {
	return xxx_messageInfo_PanTiltProfileControl.Size(m)
}
func (m *PanTiltProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_PanTiltProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_PanTiltProfileControl proto.InternalMessageInfo

func (m *PanTiltProfileControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PanTiltProfileControl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PanTiltProfileControl) GetPan() *PanTiltProfileControlAxis {
	if m != nil {
		return m.Pan
	}
	return nil
}

func (m *PanTiltProfileControl) GetTilt() *PanTiltProfileControlAxis {
	if m != nil {
		return m.Tilt
	}
	return nil
}

func (m *PanTiltProfileControl) GetChSpeed() int32 {
	if m != nil {
		return m.ChSpeed
	}
	return 0
}

type LedVarProfileControl struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ColorMap             map[string]int32 `protobuf:"bytes,3,rep,name=colorMap,proto3" json:"colorMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LedVarProfileControl) Reset()         { *m = LedVarProfileControl{} }
func (m *LedVarProfileControl) String() string { return proto.CompactTextString(m) }
func (*LedVarProfileControl) ProtoMessage()    {}
func (*LedVarProfileControl) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *LedVarProfileControl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedVarProfileControl.Unmarshal(m, b)
}
func (m *LedVarProfileControl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedVarProfileControl.Marshal(b, m, deterministic)
}
func (m *LedVarProfileControl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedVarProfileControl.Merge(m, src)
}
func (m *LedVarProfileControl) XXX_Size() int {
	return xxx_messageInfo_LedVarProfileControl.Size(m)
}
func (m *LedVarProfileControl) XXX_DiscardUnknown() {
	xxx_messageInfo_LedVarProfileControl.DiscardUnknown(m)
}

var xxx_messageInfo_LedVarProfileControl proto.InternalMessageInfo

func (m *LedVarProfileControl) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LedVarProfileControl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LedVarProfileControl) GetColorMap() map[string]int32 {
	if m != nil {
		return m.ColorMap
	}
	return nil
}

type Profile struct {
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ChannelCount int32  `protobuf:"varint,3,opt,name=channelCount,proto3" json:"channelCount,omitempty"`
	// Even though we know this is a GroupProfileControl, it's a little
	// easier on the client side if we keep it the same abstraction.
	Controls             *ProfileControl `protobuf:"bytes,4,opt,name=controls,proto3" json:"controls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetChannelCount() int32 {
	if m != nil {
		return m.ChannelCount
	}
	return 0
}

func (m *Profile) GetControls() *ProfileControl {
	if m != nil {
		return m.Controls
	}
	return nil
}

type ProfilesResponse struct {
	Profiles             map[string]*Profile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProfilesResponse) Reset()         { *m = ProfilesResponse{} }
func (m *ProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*ProfilesResponse) ProtoMessage()    {}
func (*ProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *ProfilesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfilesResponse.Unmarshal(m, b)
}
func (m *ProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfilesResponse.Marshal(b, m, deterministic)
}
func (m *ProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfilesResponse.Merge(m, src)
}
func (m *ProfilesResponse) XXX_Size() int {
	return xxx_messageInfo_ProfilesResponse.Size(m)
}
func (m *ProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProfilesResponse proto.InternalMessageInfo

func (m *ProfilesResponse) GetProfiles() map[string]*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

// Polymorphic holder message
type ControlPoint struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Val:
	//	*ControlPoint_Color
	//	*ControlPoint_Xyz
	//	*ControlPoint_Enm
	//	*ControlPoint_Intensity
	Val                  isControlPoint_Val `protobuf_oneof:"val"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ControlPoint) Reset()         { *m = ControlPoint{} }
func (m *ControlPoint) String() string { return proto.CompactTextString(m) }
func (*ControlPoint) ProtoMessage()    {}
func (*ControlPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *ControlPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPoint.Unmarshal(m, b)
}
func (m *ControlPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPoint.Marshal(b, m, deterministic)
}
func (m *ControlPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPoint.Merge(m, src)
}
func (m *ControlPoint) XXX_Size() int {
	return xxx_messageInfo_ControlPoint.Size(m)
}
func (m *ControlPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPoint proto.InternalMessageInfo

func (m *ControlPoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isControlPoint_Val interface {
	isControlPoint_Val()
}

type ControlPoint_Color struct {
	Color *ColorPoint `protobuf:"bytes,2,opt,name=color,proto3,oneof"`
}

type ControlPoint_Xyz struct {
	Xyz *XYZPoint `protobuf:"bytes,3,opt,name=xyz,proto3,oneof"`
}

type ControlPoint_Enm struct {
	Enm *EnumPoint `protobuf:"bytes,4,opt,name=enm,proto3,oneof"`
}

type ControlPoint_Intensity struct {
	Intensity *IntensityPoint `protobuf:"bytes,5,opt,name=intensity,proto3,oneof"`
}

func (*ControlPoint_Color) isControlPoint_Val() {}

func (*ControlPoint_Xyz) isControlPoint_Val() {}

func (*ControlPoint_Enm) isControlPoint_Val() {}

func (*ControlPoint_Intensity) isControlPoint_Val() {}

func (m *ControlPoint) GetVal() isControlPoint_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (m *ControlPoint) GetColor() *ColorPoint {
	if x, ok := m.GetVal().(*ControlPoint_Color); ok {
		return x.Color
	}
	return nil
}

func (m *ControlPoint) GetXyz() *XYZPoint {
	if x, ok := m.GetVal().(*ControlPoint_Xyz); ok {
		return x.Xyz
	}
	return nil
}

func (m *ControlPoint) GetEnm() *EnumPoint {
	if x, ok := m.GetVal().(*ControlPoint_Enm); ok {
		return x.Enm
	}
	return nil
}

func (m *ControlPoint) GetIntensity() *IntensityPoint {
	if x, ok := m.GetVal().(*ControlPoint_Intensity); ok {
		return x.Intensity
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ControlPoint) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ControlPoint_Color)(nil),
		(*ControlPoint_Xyz)(nil),
		(*ControlPoint_Enm)(nil),
		(*ControlPoint_Intensity)(nil),
	}
}

type ColorPoint struct {
	Components           map[string]float64 `protobuf:"bytes,1,rep,name=components,proto3" json:"components,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ColorPoint) Reset()         { *m = ColorPoint{} }
func (m *ColorPoint) String() string { return proto.CompactTextString(m) }
func (*ColorPoint) ProtoMessage()    {}
func (*ColorPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *ColorPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColorPoint.Unmarshal(m, b)
}
func (m *ColorPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColorPoint.Marshal(b, m, deterministic)
}
func (m *ColorPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColorPoint.Merge(m, src)
}
func (m *ColorPoint) XXX_Size() int {
	return xxx_messageInfo_ColorPoint.Size(m)
}
func (m *ColorPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ColorPoint.DiscardUnknown(m)
}

var xxx_messageInfo_ColorPoint proto.InternalMessageInfo

func (m *ColorPoint) GetComponents() map[string]float64 {
	if m != nil {
		return m.Components
	}
	return nil
}

type XYZPoint struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float64  `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XYZPoint) Reset()         { *m = XYZPoint{} }
func (m *XYZPoint) String() string { return proto.CompactTextString(m) }
func (*XYZPoint) ProtoMessage()    {}
func (*XYZPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *XYZPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XYZPoint.Unmarshal(m, b)
}
func (m *XYZPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XYZPoint.Marshal(b, m, deterministic)
}
func (m *XYZPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XYZPoint.Merge(m, src)
}
func (m *XYZPoint) XXX_Size() int {
	return xxx_messageInfo_XYZPoint.Size(m)
}
func (m *XYZPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_XYZPoint.DiscardUnknown(m)
}

var xxx_messageInfo_XYZPoint proto.InternalMessageInfo

func (m *XYZPoint) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZPoint) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZPoint) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type EnumPoint struct {
	Item                 int32    `protobuf:"varint,1,opt,name=item,proto3" json:"item,omitempty"`
	Degree               float64  `protobuf:"fixed64,2,opt,name=degree,proto3" json:"degree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnumPoint) Reset()         { *m = EnumPoint{} }
func (m *EnumPoint) String() string { return proto.CompactTextString(m) }
func (*EnumPoint) ProtoMessage()    {}
func (*EnumPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *EnumPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnumPoint.Unmarshal(m, b)
}
func (m *EnumPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnumPoint.Marshal(b, m, deterministic)
}
func (m *EnumPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnumPoint.Merge(m, src)
}
func (m *EnumPoint) XXX_Size() int {
	return xxx_messageInfo_EnumPoint.Size(m)
}
func (m *EnumPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_EnumPoint.DiscardUnknown(m)
}

var xxx_messageInfo_EnumPoint proto.InternalMessageInfo

func (m *EnumPoint) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *EnumPoint) GetDegree() float64 {
	if m != nil {
		return m.Degree
	}
	return 0
}

type IntensityPoint struct {
	Intensity            float64  `protobuf:"fixed64,1,opt,name=intensity,proto3" json:"intensity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntensityPoint) Reset()         { *m = IntensityPoint{} }
func (m *IntensityPoint) String() string { return proto.CompactTextString(m) }
func (*IntensityPoint) ProtoMessage()    {}
func (*IntensityPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *IntensityPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntensityPoint.Unmarshal(m, b)
}
func (m *IntensityPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntensityPoint.Marshal(b, m, deterministic)
}
func (m *IntensityPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntensityPoint.Merge(m, src)
}
func (m *IntensityPoint) XXX_Size() int {
	return xxx_messageInfo_IntensityPoint.Size(m)
}
func (m *IntensityPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_IntensityPoint.DiscardUnknown(m)
}

var xxx_messageInfo_IntensityPoint proto.InternalMessageInfo

func (m *IntensityPoint) GetIntensity() float64 {
	if m != nil {
		return m.Intensity
	}
	return 0
}

type ControlPointQuery struct {
	State                string   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlPointQuery) Reset()         { *m = ControlPointQuery{} }
func (m *ControlPointQuery) String() string { return proto.CompactTextString(m) }
func (*ControlPointQuery) ProtoMessage()    {}
func (*ControlPointQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *ControlPointQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPointQuery.Unmarshal(m, b)
}
func (m *ControlPointQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPointQuery.Marshal(b, m, deterministic)
}
func (m *ControlPointQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPointQuery.Merge(m, src)
}
func (m *ControlPointQuery) XXX_Size() int {
	return xxx_messageInfo_ControlPointQuery.Size(m)
}
func (m *ControlPointQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPointQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPointQuery proto.InternalMessageInfo

func (m *ControlPointQuery) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type ControlPointList struct {
	Cps []*ControlPoint `protobuf:"bytes,1,rep,name=cps,proto3" json:"cps,omitempty"`
	// If set, indicates these control points are for a particular state
	// This is useful when setting control points either to the current
	// state or to some other state
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// When setting control points this indicates that the control point
	// should be added if it doesn't exist in the state already
	Upsert               bool     `protobuf:"varint,3,opt,name=upsert,proto3" json:"upsert,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlPointList) Reset()         { *m = ControlPointList{} }
func (m *ControlPointList) String() string { return proto.CompactTextString(m) }
func (*ControlPointList) ProtoMessage()    {}
func (*ControlPointList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *ControlPointList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlPointList.Unmarshal(m, b)
}
func (m *ControlPointList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlPointList.Marshal(b, m, deterministic)
}
func (m *ControlPointList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPointList.Merge(m, src)
}
func (m *ControlPointList) XXX_Size() int {
	return xxx_messageInfo_ControlPointList.Size(m)
}
func (m *ControlPointList) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPointList.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPointList proto.InternalMessageInfo

func (m *ControlPointList) GetCps() []*ControlPoint {
	if m != nil {
		return m.Cps
	}
	return nil
}

func (m *ControlPointList) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ControlPointList) GetUpsert() bool {
	if m != nil {
		return m.Upsert
	}
	return false
}

type FCPatch struct {
	Cp                   string   `protobuf:"bytes,1,opt,name=cp,proto3" json:"cp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FCPatch) Reset()         { *m = FCPatch{} }
func (m *FCPatch) String() string { return proto.CompactTextString(m) }
func (*FCPatch) ProtoMessage()    {}
func (*FCPatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

func (m *FCPatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FCPatch.Unmarshal(m, b)
}
func (m *FCPatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FCPatch.Marshal(b, m, deterministic)
}
func (m *FCPatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FCPatch.Merge(m, src)
}
func (m *FCPatch) XXX_Size() int {
	return xxx_messageInfo_FCPatch.Size(m)
}
func (m *FCPatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FCPatch.DiscardUnknown(m)
}

var xxx_messageInfo_FCPatch proto.InternalMessageInfo

func (m *FCPatch) GetCp() string {
	if m != nil {
		return m.Cp
	}
	return ""
}

type FixturePatch struct {
	ByControl            map[string]*FCPatch `protobuf:"bytes,1,rep,name=byControl,proto3" json:"byControl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FixturePatch) Reset()         { *m = FixturePatch{} }
func (m *FixturePatch) String() string { return proto.CompactTextString(m) }
func (*FixturePatch) ProtoMessage()    {}
func (*FixturePatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}

func (m *FixturePatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixturePatch.Unmarshal(m, b)
}
func (m *FixturePatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixturePatch.Marshal(b, m, deterministic)
}
func (m *FixturePatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixturePatch.Merge(m, src)
}
func (m *FixturePatch) XXX_Size() int {
	return xxx_messageInfo_FixturePatch.Size(m)
}
func (m *FixturePatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FixturePatch.DiscardUnknown(m)
}

var xxx_messageInfo_FixturePatch proto.InternalMessageInfo

func (m *FixturePatch) GetByControl() map[string]*FCPatch {
	if m != nil {
		return m.ByControl
	}
	return nil
}

type FixturePatchMap struct {
	ByFixture            map[string]*FixturePatch `protobuf:"bytes,1,rep,name=byFixture,proto3" json:"byFixture,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State                string                   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Upsert               bool                     `protobuf:"varint,3,opt,name=upsert,proto3" json:"upsert,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *FixturePatchMap) Reset()         { *m = FixturePatchMap{} }
func (m *FixturePatchMap) String() string { return proto.CompactTextString(m) }
func (*FixturePatchMap) ProtoMessage()    {}
func (*FixturePatchMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}

func (m *FixturePatchMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FixturePatchMap.Unmarshal(m, b)
}
func (m *FixturePatchMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FixturePatchMap.Marshal(b, m, deterministic)
}
func (m *FixturePatchMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixturePatchMap.Merge(m, src)
}
func (m *FixturePatchMap) XXX_Size() int {
	return xxx_messageInfo_FixturePatchMap.Size(m)
}
func (m *FixturePatchMap) XXX_DiscardUnknown() {
	xxx_messageInfo_FixturePatchMap.DiscardUnknown(m)
}

var xxx_messageInfo_FixturePatchMap proto.InternalMessageInfo

func (m *FixturePatchMap) GetByFixture() map[string]*FixturePatch {
	if m != nil {
		return m.ByFixture
	}
	return nil
}

func (m *FixturePatchMap) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *FixturePatchMap) GetUpsert() bool {
	if m != nil {
		return m.Upsert
	}
	return false
}

func init() {
	proto.RegisterType((*Void)(nil), "Void")
	proto.RegisterType((*StringMsg)(nil), "StringMsg")
	proto.RegisterType((*SrcDest)(nil), "SrcDest")
	proto.RegisterType((*ProfileControl)(nil), "ProfileControl")
	proto.RegisterType((*GroupProfileControl)(nil), "GroupProfileControl")
	proto.RegisterType((*EnumProfileControlOption)(nil), "EnumProfileControlOption")
	proto.RegisterType((*EnumProfileControl)(nil), "EnumProfileControl")
	proto.RegisterType((*IntensityProfileControl)(nil), "IntensityProfileControl")
	proto.RegisterType((*PanTiltProfileControlAxis)(nil), "PanTiltProfileControlAxis")
	proto.RegisterType((*PanTiltProfileControl)(nil), "PanTiltProfileControl")
	proto.RegisterType((*LedVarProfileControl)(nil), "LedVarProfileControl")
	proto.RegisterMapType((map[string]int32)(nil), "LedVarProfileControl.ColorMapEntry")
	proto.RegisterType((*Profile)(nil), "Profile")
	proto.RegisterType((*ProfilesResponse)(nil), "ProfilesResponse")
	proto.RegisterMapType((map[string]*Profile)(nil), "ProfilesResponse.ProfilesEntry")
	proto.RegisterType((*ControlPoint)(nil), "ControlPoint")
	proto.RegisterType((*ColorPoint)(nil), "ColorPoint")
	proto.RegisterMapType((map[string]float64)(nil), "ColorPoint.ComponentsEntry")
	proto.RegisterType((*XYZPoint)(nil), "XYZPoint")
	proto.RegisterType((*EnumPoint)(nil), "EnumPoint")
	proto.RegisterType((*IntensityPoint)(nil), "IntensityPoint")
	proto.RegisterType((*ControlPointQuery)(nil), "ControlPointQuery")
	proto.RegisterType((*ControlPointList)(nil), "ControlPointList")
	proto.RegisterType((*FCPatch)(nil), "FCPatch")
	proto.RegisterType((*FixturePatch)(nil), "FixturePatch")
	proto.RegisterMapType((map[string]*FCPatch)(nil), "FixturePatch.ByControlEntry")
	proto.RegisterType((*FixturePatchMap)(nil), "FixturePatchMap")
	proto.RegisterMapType((map[string]*FixturePatch)(nil), "FixturePatchMap.ByFixtureEntry")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x5b, 0x4f, 0x1b, 0x47,
	0x14, 0x66, 0x6d, 0x2f, 0xb6, 0x8f, 0xb9, 0x79, 0x20, 0xa9, 0x71, 0x69, 0x80, 0xe1, 0xa1, 0x44,
	0x45, 0x43, 0xe3, 0x54, 0x6a, 0x14, 0x14, 0x55, 0xe0, 0x42, 0x1b, 0x15, 0x1a, 0xba, 0x46, 0x51,
	0x2f, 0x4f, 0xc3, 0x7a, 0x80, 0x55, 0xd6, 0xbb, 0xab, 0xdd, 0xb5, 0x6b, 0xf3, 0x90, 0xe7, 0x4a,
	0x55, 0x5f, 0x5a, 0xa9, 0x7f, 0xa4, 0x2f, 0x7d, 0xea, 0x1f, 0xe8, 0x9f, 0xaa, 0xe6, 0xb6, 0x17,
	0xdb, 0x10, 0x57, 0x79, 0x9b, 0x73, 0xce, 0x77, 0x6e, 0xdf, 0xcc, 0x39, 0x5e, 0x43, 0x95, 0x06,
	0x0e, 0x09, 0x42, 0x3f, 0xf6, 0xf1, 0x3c, 0x94, 0x5e, 0xfb, 0x4e, 0x17, 0x3f, 0x81, 0x6a, 0x27,
	0x0e, 0x1d, 0xef, 0xfa, 0x2c, 0xba, 0x46, 0x2b, 0x50, 0x1c, 0x50, 0xb7, 0x61, 0x6c, 0x19, 0xbb,
	0x55, 0x8b, 0x1f, 0x11, 0x82, 0x92, 0xeb, 0x44, 0x71, 0xa3, 0xb0, 0x55, 0xdc, 0xad, 0x5a, 0xe2,
	0x8c, 0xf7, 0xa1, 0xdc, 0x09, 0xed, 0x2f, 0x59, 0x14, 0x73, 0x87, 0x28, 0xb4, 0xb5, 0x43, 0x14,
	0xda, 0xdc, 0xa1, 0xcb, 0x84, 0x03, 0x57, 0x89, 0x33, 0xfe, 0xad, 0x00, 0x4b, 0xe7, 0xa1, 0x7f,
	0xe5, 0xb8, 0xac, 0xed, 0x7b, 0x71, 0xe8, 0xbb, 0x68, 0x0f, 0xcc, 0xeb, 0xd0, 0xef, 0x07, 0xc2,
	0xb5, 0xd6, 0x5a, 0x23, 0x5f, 0x71, 0x29, 0x0f, 0xfa, 0x7a, 0xce, 0x92, 0x20, 0xf4, 0x31, 0x14,
	0x99, 0xd7, 0x13, 0x31, 0x6b, 0xad, 0x55, 0x72, 0xec, 0xf5, 0x7b, 0x13, 0x50, 0x8e, 0x40, 0xcf,
	0xa0, 0xea, 0x78, 0x31, 0xf3, 0x22, 0x27, 0x1e, 0x35, 0x8a, 0x02, 0xde, 0x20, 0x2f, 0xb5, 0x66,
	0xc2, 0x27, 0x05, 0xa3, 0x16, 0x94, 0x03, 0xea, 0x5d, 0x38, 0x6e, 0xdc, 0x28, 0x09, 0xbf, 0x87,
	0xe4, 0x5c, 0xca, 0x13, 0x5e, 0x1a, 0x88, 0xf6, 0x61, 0xde, 0x65, 0xdd, 0xd7, 0x34, 0x6c, 0x98,
	0xc2, 0xe5, 0x01, 0x39, 0x15, 0xe2, 0x84, 0x87, 0x82, 0x1d, 0x99, 0x50, 0x8c, 0xfa, 0x97, 0xf8,
	0x0a, 0x56, 0xa7, 0xb4, 0x8b, 0x96, 0xa0, 0xe0, 0x74, 0x15, 0x97, 0x05, 0xa7, 0xcb, 0xa9, 0xf4,
	0x68, 0x8f, 0x69, 0x2a, 0xf9, 0x19, 0x7d, 0x02, 0x15, 0x5b, 0xc2, 0xa3, 0x46, 0x71, 0xab, 0xb8,
	0x5b, 0x6b, 0x2d, 0x93, 0x7c, 0x18, 0x2b, 0x01, 0xe0, 0xb7, 0xd0, 0x98, 0xa4, 0xea, 0x55, 0x10,
	0x3b, 0xbe, 0x97, 0x04, 0x37, 0x32, 0xc1, 0x1f, 0xc2, 0xfc, 0x80, 0xba, 0x7d, 0x16, 0x89, 0xeb,
	0x36, 0x2d, 0x25, 0xa1, 0x06, 0x94, 0x07, 0x34, 0xfc, 0x96, 0xc3, 0x8b, 0x02, 0xae, 0x45, 0xb4,
	0x01, 0xd5, 0x01, 0x0d, 0x5f, 0x5d, 0x5d, 0x45, 0x4c, 0xf2, 0x66, 0x5a, 0xa9, 0x02, 0xff, 0x6a,
	0x00, 0x9a, 0x2c, 0x60, 0xa6, 0x3e, 0x37, 0xa0, 0x6a, 0xdf, 0x50, 0xcf, 0x63, 0xee, 0xcb, 0xa1,
	0x48, 0x6a, 0x5a, 0xa9, 0x02, 0x3d, 0x85, 0xb2, 0x2f, 0xda, 0x88, 0x1a, 0x25, 0x41, 0xc2, 0x3a,
	0xb9, 0xab, 0x51, 0x4b, 0x23, 0xf1, 0x4f, 0xf0, 0xc1, 0x1d, 0x2f, 0xe1, 0xfd, 0x2b, 0xc2, 0x3f,
	0xc3, 0xfa, 0xd4, 0xe7, 0x72, 0x38, 0x74, 0x22, 0xce, 0xab, 0xed, 0xd3, 0x30, 0x92, 0x6c, 0x9b,
	0x96, 0x92, 0x78, 0x9a, 0x2b, 0xc7, 0x93, 0x69, 0x4c, 0x4b, 0x9c, 0x39, 0xb6, 0xe7, 0x78, 0x16,
	0xed, 0x8a, 0x1c, 0x86, 0xa5, 0x24, 0xa1, 0xa7, 0x43, 0xae, 0x2f, 0x29, 0xbd, 0x90, 0xf0, 0x5f,
	0x06, 0x3c, 0x98, 0x9a, 0x79, 0xa6, 0xa6, 0xf6, 0xa0, 0x18, 0x50, 0x4f, 0x4d, 0x4a, 0x93, 0xdc,
	0xd9, 0x82, 0xc5, 0x61, 0x88, 0x40, 0x29, 0x4e, 0x07, 0xe4, 0x3e, 0xb8, 0xc0, 0xf1, 0x77, 0x63,
	0xdf, 0x74, 0x02, 0xc6, 0xba, 0x62, 0x40, 0x4c, 0x4b, 0x8b, 0xf8, 0x6f, 0x03, 0xd6, 0xa6, 0xcd,
	0xca, 0x4c, 0x45, 0x7f, 0xc1, 0x67, 0xc0, 0xf5, 0xc3, 0x33, 0x1a, 0xa8, 0x19, 0xd8, 0x99, 0x3a,
	0x78, 0xa4, 0xad, 0x50, 0xc7, 0x5e, 0x1c, 0x8e, 0xac, 0xc4, 0xa9, 0x79, 0x00, 0x8b, 0x39, 0x13,
	0x5f, 0x63, 0x6f, 0xd8, 0x48, 0xaf, 0xb1, 0x37, 0x6c, 0x84, 0xd6, 0xc0, 0x14, 0x8f, 0x5f, 0xdd,
	0x8d, 0x14, 0x9e, 0x17, 0x9e, 0x19, 0xf8, 0x2d, 0x94, 0x55, 0x9a, 0x99, 0x8a, 0xc5, 0xb0, 0xa0,
	0x5e, 0x49, 0xdb, 0xef, 0x7b, 0xb1, 0x7a, 0x39, 0x39, 0x5d, 0x6e, 0xa8, 0x25, 0xb7, 0xf7, 0x0c,
	0xf5, 0x9f, 0x06, 0xac, 0x28, 0x63, 0x64, 0xb1, 0x28, 0xf0, 0xbd, 0x88, 0xa1, 0x03, 0xa8, 0x04,
	0x4a, 0xd7, 0x30, 0x04, 0x25, 0x9b, 0x64, 0x1c, 0x94, 0x28, 0x14, 0x1d, 0xda, 0xa1, 0x79, 0x0c,
	0x8b, 0x39, 0xd3, 0x14, 0x3a, 0x1e, 0x65, 0xe9, 0xa8, 0xb5, 0x2a, 0x3a, 0x56, 0x96, 0x98, 0x7f,
	0x0c, 0x58, 0x50, 0xe5, 0x9e, 0xfb, 0x8e, 0x17, 0x4f, 0x5d, 0x31, 0x3b, 0x60, 0x8a, 0x6b, 0x50,
	0x81, 0x6a, 0xf2, 0x8e, 0x04, 0x9e, 0xaf, 0x7b, 0x61, 0x43, 0x1f, 0x41, 0x71, 0x38, 0xba, 0x55,
	0xaf, 0xb2, 0x4a, 0xbe, 0xff, 0xe1, 0x47, 0x0d, 0xe0, 0x7a, 0xf4, 0x48, 0xfe, 0x1a, 0x48, 0xa6,
	0x40, 0x4e, 0xbe, 0xb6, 0xf3, 0x1f, 0x81, 0xfd, 0xec, 0x8f, 0x80, 0xa9, 0xf8, 0x4c, 0x47, 0x5f,
	0x41, 0x53, 0x0c, 0x5f, 0xcb, 0x03, 0xea, 0xe2, 0x5f, 0x0c, 0x80, 0xb4, 0x1c, 0x74, 0x00, 0x60,
	0xfb, 0xbd, 0xc0, 0xf7, 0x98, 0x17, 0x6b, 0x56, 0x3f, 0xcc, 0xd4, 0x4b, 0xda, 0x89, 0x55, 0x32,
	0x9a, 0x81, 0x37, 0x5f, 0xc0, 0xf2, 0x98, 0xf9, 0x5d, 0x8f, 0xcc, 0xc8, 0x72, 0xf9, 0x19, 0x54,
	0x74, 0xd7, 0x68, 0x01, 0x8c, 0xa1, 0xf0, 0x32, 0x2c, 0x63, 0xc8, 0xa5, 0x91, 0xc2, 0x1b, 0x23,
	0x2e, 0xdd, 0xaa, 0x45, 0x61, 0xdc, 0xe2, 0xcf, 0xa1, 0x9a, 0x90, 0xc1, 0xd9, 0x77, 0x62, 0xd6,
	0x53, 0x2b, 0x47, 0x9c, 0xf9, 0x12, 0xe9, 0xb2, 0xeb, 0x90, 0xe9, 0x8c, 0x4a, 0xc2, 0x04, 0x96,
	0xf2, 0xfc, 0xf0, 0x6d, 0x97, 0x72, 0x28, 0x93, 0xa7, 0x0a, 0xfc, 0x18, 0xea, 0xd9, 0x9b, 0xfe,
	0xae, 0xcf, 0x42, 0xd1, 0x4d, 0x14, 0xd3, 0x58, 0xdf, 0xb7, 0x14, 0x30, 0x85, 0x95, 0x2c, 0xf4,
	0xd4, 0x89, 0x62, 0xb4, 0x09, 0x45, 0x3b, 0xd0, 0x94, 0x2e, 0x92, 0xac, 0xdd, 0xe2, 0x96, 0x34,
	0x54, 0x21, 0x13, 0x8a, 0x57, 0xdf, 0x0f, 0x22, 0x16, 0xca, 0x21, 0xaa, 0x58, 0x4a, 0xc2, 0xeb,
	0x50, 0x3e, 0x69, 0x9f, 0xd3, 0xd8, 0xbe, 0xe1, 0x13, 0x69, 0x07, 0x7a, 0x22, 0xed, 0x00, 0xff,
	0x6e, 0xc0, 0xc2, 0x89, 0x33, 0x8c, 0xfb, 0x21, 0x93, 0x80, 0xe7, 0x50, 0xbd, 0x1c, 0xa9, 0x84,
	0xaa, 0x80, 0x0d, 0x92, 0x45, 0x90, 0x23, 0x6d, 0x96, 0x97, 0x9a, 0xc2, 0x9b, 0x27, 0xb0, 0x94,
	0x37, 0xce, 0x32, 0x28, 0xaa, 0xb2, 0xec, 0xe5, 0xfe, 0x6b, 0xc0, 0x72, 0x36, 0xe5, 0x19, 0x0d,
	0xd0, 0x0b, 0x5e, 0x97, 0x52, 0x26, 0x13, 0x3c, 0x06, 0x22, 0x47, 0x1a, 0x91, 0x94, 0xa6, 0xe4,
	0xff, 0x47, 0x58, 0xf3, 0x1b, 0xde, 0x48, 0x36, 0xd4, 0x94, 0x46, 0x76, 0xf2, 0x8d, 0x2c, 0xe6,
	0x8a, 0xc9, 0x74, 0xd3, 0xfa, 0x63, 0x1e, 0xcc, 0x63, 0xf7, 0x82, 0x31, 0xb4, 0x05, 0xa5, 0x73,
	0xc7, 0xbb, 0x46, 0x40, 0x92, 0x2f, 0xca, 0x66, 0xe6, 0x8c, 0xe7, 0xd0, 0x5e, 0xf2, 0x1d, 0x78,
	0xea, 0x5c, 0x86, 0x34, 0x1c, 0x21, 0x93, 0xf0, 0xaf, 0xd0, 0x66, 0x7d, 0x62, 0x5b, 0xe1, 0x39,
	0xb4, 0x0d, 0xd0, 0xe1, 0x7d, 0xf0, 0x2f, 0x8d, 0x48, 0x23, 0xf3, 0x01, 0x3f, 0xe5, 0x9b, 0x3c,
	0x7d, 0x3d, 0x51, 0x2e, 0x77, 0x9d, 0x8c, 0xbf, 0x3c, 0xe1, 0xb1, 0x94, 0xed, 0x84, 0xe5, 0x5d,
	0x56, 0xc6, 0x39, 0xc7, 0x73, 0x88, 0xc0, 0x4a, 0x87, 0xc5, 0xf9, 0x34, 0x93, 0xa1, 0x9b, 0xb2,
	0x3e, 0x3c, 0x87, 0x9e, 0xc0, 0xaa, 0xc5, 0x7a, 0xfe, 0x80, 0xcd, 0xee, 0x42, 0xa0, 0xde, 0x61,
	0xf1, 0x58, 0x5d, 0x13, 0xb5, 0x64, 0x53, 0xac, 0xc9, 0x14, 0xb3, 0xbb, 0x6c, 0x03, 0x1c, 0x06,
	0x81, 0x3b, 0x12, 0x8c, 0xe6, 0x7a, 0x4e, 0x20, 0x8f, 0x01, 0x9d, 0xfa, 0xb4, 0x4b, 0x2f, 0x5d,
	0xf6, 0x2e, 0xde, 0x77, 0xa1, 0xce, 0xa1, 0x39, 0xf8, 0xf4, 0xa0, 0xbb, 0x50, 0xef, 0xd0, 0x01,
	0x9b, 0x01, 0xb9, 0x09, 0x8b, 0x1c, 0x79, 0xe8, 0xba, 0x02, 0x94, 0x64, 0xce, 0x00, 0x2a, 0x87,
	0xdd, 0xee, 0x3d, 0x11, 0x30, 0xd4, 0x24, 0x2d, 0xf7, 0x60, 0xb6, 0xa0, 0xd6, 0xf6, 0x03, 0x49,
	0xc3, 0x85, 0x8f, 0x2a, 0x44, 0xfd, 0x95, 0xc9, 0x21, 0xce, 0x74, 0x8c, 0xe9, 0x88, 0x6d, 0x58,
	0x48, 0xb9, 0x9c, 0x0a, 0xb9, 0x9c, 0x17, 0xff, 0xb2, 0x9e, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x17, 0x1f, 0x01, 0xb7, 0x72, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ElTeeClient is the client API for ElTee service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ElTeeClient interface {
	Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error)
	ProfileLibrary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProfilesResponse, error)
	// Get a list of state names and control point values in that state
	StateNames(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringMsg, error)
	ControlPoints(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*ControlPointList, error)
	FixturePatches(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*FixturePatchMap, error)
	//
	//Sets current values directly without modifying any other state declaration.
	SetControlPoints(ctx context.Context, in *ControlPointList, opts ...grpc.CallOption) (*Void, error)
	RemoveControlPoints(ctx context.Context, in *ControlPointList, opts ...grpc.CallOption) (*Void, error)
	//
	//Setting and removing fixture patches
	SetFixturePatches(ctx context.Context, in *FixturePatchMap, opts ...grpc.CallOption) (*Void, error)
	RemoveFixturePatches(ctx context.Context, in *FixturePatchMap, opts ...grpc.CallOption) (*Void, error)
	// Set a particular state
	ApplyState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error)
	// States can be loaded and saved
	LoadableStateNames(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringMsg, error)
	LoadLoadableState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error)
	SaveLoadableState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error)
	SaveAllStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Add and remove states, which could be then saved
	AddState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error)
	RemoveState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error)
	// Duplicate and apply
	CopyStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error)
	MoveStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error)
	ApplyStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error)
}

type elTeeClient struct {
	cc *grpc.ClientConn
}

func NewElTeeClient(cc *grpc.ClientConn) ElTeeClient {
	return &elTeeClient{cc}
}

func (c *elTeeClient) Ping(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/ElTee/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) ProfileLibrary(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ProfilesResponse, error) {
	out := new(ProfilesResponse)
	err := c.cc.Invoke(ctx, "/ElTee/ProfileLibrary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) StateNames(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/ElTee/StateNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) ControlPoints(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*ControlPointList, error) {
	out := new(ControlPointList)
	err := c.cc.Invoke(ctx, "/ElTee/ControlPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) FixturePatches(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*FixturePatchMap, error) {
	out := new(FixturePatchMap)
	err := c.cc.Invoke(ctx, "/ElTee/FixturePatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) SetControlPoints(ctx context.Context, in *ControlPointList, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/SetControlPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) RemoveControlPoints(ctx context.Context, in *ControlPointList, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/RemoveControlPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) SetFixturePatches(ctx context.Context, in *FixturePatchMap, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/SetFixturePatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) RemoveFixturePatches(ctx context.Context, in *FixturePatchMap, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/RemoveFixturePatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) ApplyState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/ApplyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) LoadableStateNames(ctx context.Context, in *Void, opts ...grpc.CallOption) (*StringMsg, error) {
	out := new(StringMsg)
	err := c.cc.Invoke(ctx, "/ElTee/LoadableStateNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) LoadLoadableState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/LoadLoadableState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) SaveLoadableState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/SaveLoadableState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) SaveAllStates(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/SaveAllStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) AddState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/AddState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) RemoveState(ctx context.Context, in *StringMsg, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/RemoveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) CopyStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/CopyStateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) MoveStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/MoveStateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elTeeClient) ApplyStateTo(ctx context.Context, in *SrcDest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/ElTee/ApplyStateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElTeeServer is the server API for ElTee service.
type ElTeeServer interface {
	Ping(context.Context, *StringMsg) (*StringMsg, error)
	ProfileLibrary(context.Context, *Void) (*ProfilesResponse, error)
	// Get a list of state names and control point values in that state
	StateNames(context.Context, *Void) (*StringMsg, error)
	ControlPoints(context.Context, *StringMsg) (*ControlPointList, error)
	FixturePatches(context.Context, *StringMsg) (*FixturePatchMap, error)
	//
	//Sets current values directly without modifying any other state declaration.
	SetControlPoints(context.Context, *ControlPointList) (*Void, error)
	RemoveControlPoints(context.Context, *ControlPointList) (*Void, error)
	//
	//Setting and removing fixture patches
	SetFixturePatches(context.Context, *FixturePatchMap) (*Void, error)
	RemoveFixturePatches(context.Context, *FixturePatchMap) (*Void, error)
	// Set a particular state
	ApplyState(context.Context, *StringMsg) (*Void, error)
	// States can be loaded and saved
	LoadableStateNames(context.Context, *Void) (*StringMsg, error)
	LoadLoadableState(context.Context, *StringMsg) (*Void, error)
	SaveLoadableState(context.Context, *StringMsg) (*Void, error)
	SaveAllStates(context.Context, *Void) (*Void, error)
	// Add and remove states, which could be then saved
	AddState(context.Context, *StringMsg) (*Void, error)
	RemoveState(context.Context, *StringMsg) (*Void, error)
	// Duplicate and apply
	CopyStateTo(context.Context, *SrcDest) (*Void, error)
	MoveStateTo(context.Context, *SrcDest) (*Void, error)
	ApplyStateTo(context.Context, *SrcDest) (*Void, error)
}

// UnimplementedElTeeServer can be embedded to have forward compatible implementations.
type UnimplementedElTeeServer struct {
}

func (*UnimplementedElTeeServer) Ping(ctx context.Context, req *StringMsg) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedElTeeServer) ProfileLibrary(ctx context.Context, req *Void) (*ProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileLibrary not implemented")
}
func (*UnimplementedElTeeServer) StateNames(ctx context.Context, req *Void) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateNames not implemented")
}
func (*UnimplementedElTeeServer) ControlPoints(ctx context.Context, req *StringMsg) (*ControlPointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControlPoints not implemented")
}
func (*UnimplementedElTeeServer) FixturePatches(ctx context.Context, req *StringMsg) (*FixturePatchMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FixturePatches not implemented")
}
func (*UnimplementedElTeeServer) SetControlPoints(ctx context.Context, req *ControlPointList) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControlPoints not implemented")
}
func (*UnimplementedElTeeServer) RemoveControlPoints(ctx context.Context, req *ControlPointList) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveControlPoints not implemented")
}
func (*UnimplementedElTeeServer) SetFixturePatches(ctx context.Context, req *FixturePatchMap) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFixturePatches not implemented")
}
func (*UnimplementedElTeeServer) RemoveFixturePatches(ctx context.Context, req *FixturePatchMap) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFixturePatches not implemented")
}
func (*UnimplementedElTeeServer) ApplyState(ctx context.Context, req *StringMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyState not implemented")
}
func (*UnimplementedElTeeServer) LoadableStateNames(ctx context.Context, req *Void) (*StringMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadableStateNames not implemented")
}
func (*UnimplementedElTeeServer) LoadLoadableState(ctx context.Context, req *StringMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadLoadableState not implemented")
}
func (*UnimplementedElTeeServer) SaveLoadableState(ctx context.Context, req *StringMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoadableState not implemented")
}
func (*UnimplementedElTeeServer) SaveAllStates(ctx context.Context, req *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAllStates not implemented")
}
func (*UnimplementedElTeeServer) AddState(ctx context.Context, req *StringMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddState not implemented")
}
func (*UnimplementedElTeeServer) RemoveState(ctx context.Context, req *StringMsg) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveState not implemented")
}
func (*UnimplementedElTeeServer) CopyStateTo(ctx context.Context, req *SrcDest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyStateTo not implemented")
}
func (*UnimplementedElTeeServer) MoveStateTo(ctx context.Context, req *SrcDest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveStateTo not implemented")
}
func (*UnimplementedElTeeServer) ApplyStateTo(ctx context.Context, req *SrcDest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyStateTo not implemented")
}

func RegisterElTeeServer(s *grpc.Server, srv ElTeeServer) {
	s.RegisterService(&_ElTee_serviceDesc, srv)
}

func _ElTee_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).Ping(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_ProfileLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).ProfileLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/ProfileLibrary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).ProfileLibrary(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_StateNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).StateNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/StateNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).StateNames(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_ControlPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).ControlPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/ControlPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).ControlPoints(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_FixturePatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).FixturePatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/FixturePatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).FixturePatches(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_SetControlPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPointList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).SetControlPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/SetControlPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).SetControlPoints(ctx, req.(*ControlPointList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_RemoveControlPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPointList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).RemoveControlPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/RemoveControlPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).RemoveControlPoints(ctx, req.(*ControlPointList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_SetFixturePatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixturePatchMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).SetFixturePatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/SetFixturePatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).SetFixturePatches(ctx, req.(*FixturePatchMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_RemoveFixturePatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FixturePatchMap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).RemoveFixturePatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/RemoveFixturePatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).RemoveFixturePatches(ctx, req.(*FixturePatchMap))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_ApplyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).ApplyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/ApplyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).ApplyState(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_LoadableStateNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).LoadableStateNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/LoadableStateNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).LoadableStateNames(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_LoadLoadableState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).LoadLoadableState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/LoadLoadableState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).LoadLoadableState(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_SaveLoadableState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).SaveLoadableState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/SaveLoadableState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).SaveLoadableState(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_SaveAllStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).SaveAllStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/SaveAllStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).SaveAllStates(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_AddState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).AddState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/AddState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).AddState(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_RemoveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).RemoveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/RemoveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).RemoveState(ctx, req.(*StringMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_CopyStateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrcDest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).CopyStateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/CopyStateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).CopyStateTo(ctx, req.(*SrcDest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_MoveStateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrcDest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).MoveStateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/MoveStateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).MoveStateTo(ctx, req.(*SrcDest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElTee_ApplyStateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrcDest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElTeeServer).ApplyStateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ElTee/ApplyStateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElTeeServer).ApplyStateTo(ctx, req.(*SrcDest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ElTee_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ElTee",
	HandlerType: (*ElTeeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ElTee_Ping_Handler,
		},
		{
			MethodName: "ProfileLibrary",
			Handler:    _ElTee_ProfileLibrary_Handler,
		},
		{
			MethodName: "StateNames",
			Handler:    _ElTee_StateNames_Handler,
		},
		{
			MethodName: "ControlPoints",
			Handler:    _ElTee_ControlPoints_Handler,
		},
		{
			MethodName: "FixturePatches",
			Handler:    _ElTee_FixturePatches_Handler,
		},
		{
			MethodName: "SetControlPoints",
			Handler:    _ElTee_SetControlPoints_Handler,
		},
		{
			MethodName: "RemoveControlPoints",
			Handler:    _ElTee_RemoveControlPoints_Handler,
		},
		{
			MethodName: "SetFixturePatches",
			Handler:    _ElTee_SetFixturePatches_Handler,
		},
		{
			MethodName: "RemoveFixturePatches",
			Handler:    _ElTee_RemoveFixturePatches_Handler,
		},
		{
			MethodName: "ApplyState",
			Handler:    _ElTee_ApplyState_Handler,
		},
		{
			MethodName: "LoadableStateNames",
			Handler:    _ElTee_LoadableStateNames_Handler,
		},
		{
			MethodName: "LoadLoadableState",
			Handler:    _ElTee_LoadLoadableState_Handler,
		},
		{
			MethodName: "SaveLoadableState",
			Handler:    _ElTee_SaveLoadableState_Handler,
		},
		{
			MethodName: "SaveAllStates",
			Handler:    _ElTee_SaveAllStates_Handler,
		},
		{
			MethodName: "AddState",
			Handler:    _ElTee_AddState_Handler,
		},
		{
			MethodName: "RemoveState",
			Handler:    _ElTee_RemoveState_Handler,
		},
		{
			MethodName: "CopyStateTo",
			Handler:    _ElTee_CopyStateTo_Handler,
		},
		{
			MethodName: "MoveStateTo",
			Handler:    _ElTee_MoveStateTo_Handler,
		},
		{
			MethodName: "ApplyStateTo",
			Handler:    _ElTee_ApplyStateTo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
